"""
app/main.py

Это точка входа нашего приложения FastAPI.

Задача этого файла:
  • создать объект приложения (`app`), который будет "сердцем" сервиса;
  • описать маршруты (эндпоинты), по которым сервер будет принимать HTTP-запросы;
  • вернуть простейший JSON-ответ, чтобы проверить, что сервер жив.

На этом этапе (Этап 0) у нас только один эндпоинт: GET /
"""


# ──────────────────────────────────────────────────────────────
# Импортируем FastAPI — это основной класс фреймворка.
# Он используется для создания приложения и регистрации маршрутов.
# ──────────────────────────────────────────────────────────────
from fastapi import FastAPI


# ──────────────────────────────────────────────────────────────
# Создаём экземпляр приложения.
# ──────────────────────────────────────────────────────────────
# Этот объект app — это и есть наше ASGI-приложение.
# Позже его будет запускать сервер (например, Uvicorn),
# вызывая его при каждом входящем запросе.
#
# Аргументы конструктора:
#   title   → отображается в документации Swagger (/docs)
#   version → удобно для фиксации текущего состояния API
# ──────────────────────────────────────────────────────────────
app = FastAPI(
    title="Agent Tasks",
    version="0.0.1",
    description="Мини-сервис для чата с агентом и управления задачами.",
)


# ──────────────────────────────────────────────────────────────
# Маршрут (эндпоинт): GET /
# ──────────────────────────────────────────────────────────────
# Каждый декоратор @app.get(), @app.post() и т. д. регистрирует
# функцию как обработчик конкретного HTTP-метода и пути.
#
# Здесь:
#   • метод → GET
#   • путь  → '/'
#
# Когда клиент (браузер, curl, фронтенд) делает запрос GET /,
# FastAPI вызывает функцию `root()` и возвращает её результат.
# ──────────────────────────────────────────────────────────────
@app.get("/", summary="Healthcheck / приветствие")
def root():
    """
    Простейшая проверка, что сервер работает.

    Возвращаем JSON-объект — Python-словарь автоматически
    сериализуется FastAPI в JSON и отправляется клиенту.
    """

    # Возвращаем словарь (dict). FastAPI сделает из него JSON.
    return {"ok": True, "service": "Agent Tasks"}


# ──────────────────────────────────────────────────────────────
# Как это работает "под капотом" (упрощённо)
# ──────────────────────────────────────────────────────────────
#
# 1️⃣ Сервер (Uvicorn) слушает порт 8000 и ждёт подключения.
# 2️⃣ Когда приходит запрос GET /, Uvicorn создаёт объект запроса и
#    передаёт его в FastAPI (через протокол ASGI).
# 3️⃣ FastAPI смотрит на маршрут → видит, что / обрабатывается функцией root().
# 4️⃣ Вызывает root() → получает словарь.
# 5️⃣ Преобразует словарь в JSON → отправляет клиенту.
#
# Результат: клиент получает {"ok": true, "service": "Agent Tasks"}.
#
# Таким образом:
#   - Uvicorn → сеть, сокеты, HTTP.
#   - FastAPI → маршруты, валидация, сериализация.
#   - root() → наша бизнес-логика (пусть пока простая).
#
# Это классическая архитектура ASGI-приложения:
#
#     [Browser/curl] ⇄ [Uvicorn server] ⇄ [FastAPI app] ⇄ [наш код]
#
# Позже мы добавим:
#   - POST /chat (контракт чата)
#   - маршрутизацию на модули
#   - хранение данных
#   - фронтенд и тесты
#
# Но фундамент уже готов.